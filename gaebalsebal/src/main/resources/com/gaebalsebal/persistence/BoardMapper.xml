<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.gaebalsebal.persistence.BoardMapper">
  
  <sql id="criteria">
    <trim  suffix=" AND " prefixOverrides="OR">
    	<foreach item='type' collection="typeArr">
    	 	<trim prefix="OR">
    	 		<choose>
    	 			<when test="type == 'T'.toString()">
    	 				board_title like '%' || #{keyword} || '%'
    	 			</when>	
    	 			<when test="type == 'C'.toString()">
    	 				board_content like '%' || #{keyword} || '%'
    	 			</when>	    	 			
     	 			<when test="type == 'W'.toString()">
    	 				board_writer like '%' || #{keyword} || '%'
    	 			</when>
				  <when test="type == 'H'.toString()">
				    board_no IN (
				      SELECT DISTINCT board_no 
				      FROM tag 
				      WHERE tag_name IN
				      <foreach index="idx" item="keyword" collection="keywords" open="(" separator="," close=")">
				      <if test="idx !=0">
				         '#'||#{keyword} 
				       </if> 
				      </foreach>
				    )
				  </when>     	   
    			</choose>
    		</trim>	
    	</foreach>	
	 </trim>	   

  </sql>
  
  

  <select id="getListWithPaging" resultType="BoardVO">
 <![CDATA[ 
    SELECT *FROM (
  		  SELECT /*+INDEX_DESC(BOARD BOARD_PK)*/ 
			    ROWNUM RN
			    , b.board_no
			    , b.board_writer
			    , m.member_nickname
			    , b.board_title
			    , b.board_content
			    , b.board_create_date
			    , b.board_update_date
			    , b.board_view
			    , (select count(*) from heart where b.board_no = heart.board_no)as board_like
			    , b.board_use_yn
			    , b.board_category
			    
			    FROM board b 
			    INNER JOIN member m ON b.board_writer = m.member_no 
			    
			    
				    ]]>
				    
				     WHERE 

				<include refid="criteria"></include>   
					 <![CDATA[     
	   			 ROWNUM <= #{pageNum} * #{amount}
				]]>
				         <choose>
				          <when test="sort == 'board_no_asc'">
				            ORDER BY board_no ASC
				          </when>
				          <when test="sort == 'board_no_desc'">
				            ORDER BY board_no DESC
				          </when>
				          <when test="sort == 'board_title_asc'">
				            ORDER BY board_title ASC
				          </when>
				          <otherwise>
				            ORDER BY board_no DESC
				          </otherwise>
				        </choose>
					 <![CDATA[ 		    
				)
				WHERE RN > (#{pageNum} -1) * #{amount}
				]]>
			  </select>
  
  
  <select id="getTotalCount" resultType="int">
  	select count(*) from board
  	where
  	
  	<include refid="criteria"></include>
  	
  	board_no > 0
  </select>

<select id="getTagList" resultType="TagVO">
    SELECT tag_name,board_no FROM tag WHERE board_no = #{board_no}
</select>

<select id="selectBoardList" resultType="BoardVO">
  	SELECT *
	    FROM board
	    WHERE board_category = #{board_category}
	        and board_use_yn = 'Y'
  </select>
  
  <select id="selectBoard" resultType="BoardVO">
  	SELECT board.* 
  	,(SELECT COUNT(*) FROM heart WHERE board_no = board.board_no) AS board_like
  	,(SELECT COUNT(*) FROM heart WHERE BOARD_NO = #{board_no} AND MEMBER_NO = #{member_no} )  AS board_like_check
  	,(SELECT member_nickname from member where member_no = board.board_writer) AS board_writer_nickname
	    FROM board
	    WHERE board_no = #{board_no}
  </select>
  
  <update id="updateView">
  	UPDATE board
        SET board_view = board_view + 1
        WHERE board_no = #{board_no}
  </update>
  
     <insert id="insertBoard" parameterType="BoardVO" useGeneratedKeys="true" keyProperty="board_no" keyColumn="board_no">
	   <selectKey keyProperty="board_no" order="BEFORE" resultType="int">
	         SELECT BOARD_SEQ.nextval FROM dual
	   </selectKey>
  	INSERT INTO board
	    VALUES( #{board_no} -- board_no
	   			, 21 -- board_writer
	   			, #{board_title} -- board_title
	   			, #{board_content} -- board_content
	   			, sysdate -- board_create_date
	   			, null -- board_update_date
	   	        
	   	        , 0 -- board_view
	            , 'Y' -- board_use_yn
	          	, #{board_category} -- board_category     
	            
	          
	            
	            
	            
	            
    )
  </insert>
  
  <insert id="insertTag">
		INSERT INTO tag
		    VALUES( seq_tag_no_pk.nextval -- tag_no
		            , #{tag_name} -- tag_name
		            , #{board_no} -- board_no
    )
	</insert>
	
	<insert id="insertFile">
		INSERT INTO files
		    VALUES( seq_file_no_pk.nextval -- file_no
		            , #{file_name} -- file_name
		            , #{file_uuid} -- file_uuid
		            , #{folder_path} -- folder_path
		            , #{board_no} -- board_no
		    )
	</insert>
  
  <update id="updateBoard">
  	UPDATE board
	    SET board_category = #{board_category}
	    	, board_title = #{board_title}
	        , board_content = #{board_content}
	        , board_update_date = sysdate
	    WHERE board_no = #{board_no}
  </update>
  
  <delete id="deleteBoard">
  	UPDATE board
	    SET board_use_yn = 'N'
	    WHERE board_no = #{board_no}
  </delete>
  
    <insert id="increaseLikeCount">
	insert into heart values (heart_no_seq.nextval , 'Y' , #{member_no} , #{board_no})
  </insert>
  
    <delete id="decreaseLikeCount">
  	delete from heart 
	    
	    WHERE board_no = #{board_no}
	    AND member_no =  #{member_no}
  </delete>
  
   <!-- 댓글 목록 댓글-대댓글 순으로 읽어오기  -->
  <select id="viewReply" resultType="CommentVO">
	SELECT comments_writer
		  ,comments_content
		  ,comments_create_date
		  ,comments_dep
		  ,comments_group
		  ,comments_no
		  ,member_no
		  ,comments_use_yn
	    FROM comments
	    	WHERE board_no = #{board_no}
			    START WITH comments_group is null
			    CONNECT BY PRIOR comments_no = comments_group
			    order siblings by comments_no asc, comments_group asc
  </select> 
  
 
 
<!-- 댓글 등록하기  -->
  <insert id="insertReply">
   INSERT INTO comments
   						(
   						comments_no       
                        ,board_no
                        ,member_no       
                        ,comments_writer      
                        ,comments_content     
                        ,comments_create_date 
                        ,comments_dep
                       )
                       VALUES
                       (
                        comments_no.NEXTVAL       
                        ,#{board_no}
                        ,#{member_no}
                        ,#{comments_writer}  
                        ,#{comments_content}        
                        ,sysdate
                        ,0
                        )
  </insert>
  
  <!-- 대댓글 등록하기  -->
  <insert id="insertRereply">
   INSERT INTO comments
   						(
   						comments_no       
                        ,board_no
                        ,member_no
                        ,comments_writer        
                        ,comments_content     
                        ,comments_create_date 
                        ,comments_group
                        ,comments_dep
                       )
                       VALUES
                       (
                        comments_no.NEXTVAL       
                        ,#{board_no}
                        ,#{member_no}  
                        ,#{comments_writer}                         
                        ,#{comments_content}        
                        ,sysdate
                        ,#{comments_group}
                        ,1
                        )
  </insert>
  
  
  
    <!-- 댓글 삭제하기  -->
  <update id="deleteReply">
   UPDATE comments SET comments_use_yn = 'N'
   			WHERE comments_no = #{comments_no}
   			AND board_no = #{board_no}

  </update>
  
  

</mapper>